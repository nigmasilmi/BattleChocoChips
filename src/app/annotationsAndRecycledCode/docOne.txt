toogleTheCookie(idComing, targetCoords, contCookieComing) {
    // let data = {};
    const rowCoord = this.checkTheCoordLength(targetCoords)[0];
    const colCoord = this.checkTheCoordLength(targetCoords)[1];
    console.log(' typeof rowCoord: ', typeof(rowCoord));

    console.log('rowCoord: ', rowCoord);
    console.log('colCoord: ', colCoord);
    console.log('idComing: ', idComing);
    console.log('targetCoords: ', targetCoords);
    console.log('contCookieComing: ', contCookieComing);
    if (contCookieComing === 0) {
      console.log('nada por ahora');
      // 1. entrar al documento específico
      // 2. acceder a la propiedad withCookie de interés:
      // 2.1 entrar a la propiedad board cuyo valor es un mapa
      // { board: }
      // 2.2 entrar a la propiedad  cuya key es igual al número de la fila (rowCoord)
      // { board: `[${rowCoord}]` }
      // 2.3 recorrer el arreglo hasta el índice cuyo valor es el número de la columna (colCoord)
      // { board: `[${rowCoord}]` `[${colCoord}]`}
      // 2.4 acceder a la propiedad withCookie del mapa contenido en la posición
      // { board: `[${rowCoord}]` `[${colCoord}]`.withCooke}
      // 2.5 modificar el valor de la propiedad withCookie
      // { board: `[${rowCoord}]` `[${colCoord}]`.withCooke = 1}
      // 2.6 ejecutar el método update enviando en el cuerpo la data necesaria (pasos 2.1 - 2.5)
      // return this.afs.collection('boards').doc(`${idComing}`).update({ board: [rowCoord] = 1} );
      // return this.afs.collection('boards').doc(`${idComing}`).update({ board: [rowCoord][colCoord].withCooke = 1} );

    } else if (contCookieComing === 1) {
      console.log('otro nada por ahora');
    } else {
      console.log('enviar mensaje al usuario con: no puede modificar el estado de esta casilla');
    }

  }

  /////////////////////////////////////////////

  <h2>Selecciona tu jugador</h2>

<button (click)="goWithA()" *ngIf="iGoWithA" type="submit">Jugador A</button>
<button (click)="goWithB()" *ngIf="iGoWithB" type="submit">Jugador B</button>

<!-- on submit debe llamar a create board en el servicio y tomar estos valores de input como los argumentos
de la función -->
<!-- JUGADOR A -->
<div *ngIf="iGoWithA">
<h3>Jugador A</h3>
<form [formGroup]="this.fleetPlacingS.preferencesForm">
  <label for="playerNameId">Nombre del Jugador</label>
  <input formControlName="playerName" type="text" id="playerNameId"><br>
  <div class="errorMsg" *ngIf="( playerNameInput.dirty || playerNameInput.touched ) && playerNameInput.errors?.required">Debes ingresar un nombre de jugador</div>
  <label for="rowsInputId">Cantidad de filas</label>
  <input formControlName="rowsInput" type="number" id="rowsInputId"><br>
  <div class="errorMsg" *ngIf="rowsNumber.errors?.min">El número de filas debe ser mayor a 1</div>
  <div class="errorMsg" *ngIf="rowsNumber.errors?.max">El número de filas no puede ser mayor a 10</div>
  <label for="colsInputId">Cantidad de columnas</label>
  <input formControlName="colsInput" type="number" id="colsInputId"><br>
  <div class="errorMsg" *ngIf="colsNumber.errors?.min">El número de columnas debe ser mayor a 1</div>
  <div class="errorMsg" *ngIf="colsNumber.errors?.max">El número de columnas no puede ser mayor a 10</div>
  <button (click)="onSubmit()" type="submit" [disabled]="!this.fleetPlacingS.preferencesForm.valid">Crear
    Tablero</button>
</form>
<div *ngIf="playerIsSet">
  <a routerLink="/boardA">Ir al tablero </a>
</div>
</div>

<hr>
<hr>

<!-- JUGADOR B -->
<div *ngIf="iGoWithB">
<h3>Jugador B</h3>
<form [formGroup]="this.fleetPlacingS.preferencesForm">
  <label for="playerNameId">Nombre del Jugador</label>
  <input formControlName="playerName" type="text" id="playerNameId"><br>
  <label for="boardSelectId">Selecciona un tipo de tablero</label>
  <select id="boardSelectId" formControlName="boardType">
    <option *ngFor="let board of boardsPredefined; let i = index" [value]="boardsPredefined[i].label">
      {{boardsPredefined[i].nivel}}
    </option>
  </select>
  <div class="errorMsg" *ngIf="( playerNameInput.dirty || playerNameInput.touched ) && playerNameInput.errors?.required">Debes ingresar un nombre de jugador</div>
  <label for="rowsInputId">Cantidad de filas</label>
  <input formControlName="rowsInput" type="number" id="rowsInputId"><br>
  <div class="errorMsg" *ngIf="rowsNumber.errors?.min">El número de filas debe ser mayor a 1</div>
  <div class="errorMsg" *ngIf="rowsNumber.errors?.max">El número de filas no puede ser mayor a 10</div>
  <label for="colsInputId">Cantidad de columnas</label>
  <input formControlName="colsInput" type="number" id="colsInputId"><br>
  <div class="errorMsg" *ngIf="colsNumber.errors?.min">El número de columnas debe ser mayor a 1</div>
  <div class="errorMsg" *ngIf="colsNumber.errors?.max">El número de columnas no puede ser mayor a 10</div>
  <button (click)="onSubmit()" type="submit" [disabled]="!this.fleetPlacingS.preferencesForm.valid">Crear
    Tablero</button>
</form>
<div *ngIf="playerIsSet">
  <a routerLink="/boardB">Ir al tablero </a>
</div>
</div>

///////////////////////////////////////////////

<!-- JUGADOR B -->
<div *ngIf="iGoWithB">
<h3>Jugador B</h3>
<form [formGroup]="this.fleetPlacingS.preferencesForm">
  <label for="playerNameId">Nombre del Jugador</label>
  <input formControlName="playerName" type="text" id="playerNameId"><br>
  <label for="boardSelectId">Selecciona un tipo de tablero</label><br>
  <select id="boardSelectId" formControlName="boardType">
    <option *ngFor="let board of boardsPredefined; let i = index" [value]="boardsPredefined[i].label">
      {{boardsPredefined[i].nivel}}
    </option>
  </select>
  <div class="errorMsg" *ngIf="( playerNameInput.dirty || playerNameInput.touched ) && playerNameInput.errors?.required">Debes ingresar un nombre de jugador</div>
  <button (click)="onSubmit()" type="submit">Crear
    Tablero</button>
</form>
<div *ngIf="playerIsSet">
  <a routerLink="/boardB">Ir al tablero </a>
</div>
</div>

////////////////////////////////////////

bringTheInterestBoard(id) {
  this.afs.collection('boards').doc(id).snapshotChanges().pipe(map((changes => {
    return changes.map(a => {
      const singleBoard = a.payload.doc.data() as Board;
      const singleBoardArr = [];
      for (const arr in singleBoard.board) {
        if (arr) {
          singleBoardArr.push(singleBoardArr.board[obj]);
        }
      }
    });
  })));

  